'*******************************************************************************
'
'   PIC 18F25K22
'   Quartz 16 MHz + PLL X4  => 64.0000 MHz
'
'*******************************************************************************
'
'   Simulateur d'un encodeur moteur en fonction d'une tension de commande -10V / +10V
'
'*******************************************************************************
'
'   Date de revision :  06/05/2018
'
' ******************************************************************************
'
'   A0 => Entree analogique AN0
'   A1 => NC
'   A2 => NC
'   A3 => NC
'   A4 => NC
'   A5 => NC
'   A6 => Quartz 16MHz
'   A7 => Quartz 16MHz
'
'   B0 => Sortie A+
'   B1 => Sortie B+
'   B2 => Sortie Z+
'   B3 => Sortie A-
'   B4 => Sortie B-
'   B5 => Sortie Z-
'   B6 => Prog
'   B7 => Prog
'
'   C0 => NC
'   C1 => NC
'   C2 => NC
'   C3 => Sortie Start Stepper
'   C4 => Led bicolore
'   C5 => NC
'   C6 => Led bicolore
'   C7 => NC
'
'   E3 => Prog
'
'*******************************************************************************

program CPENCA_Faker

#DEFINE PIC18F25k50
#DEFINE WITH_INERTIA
#DEFINE WITH_DIFFERENTIAL
#DEFINE ADC_16BITS

#IFDEF PIC18F25k50 THEN
symbol ENC_A_P = LATB.0
symbol ENC_A_M = LATB.1
symbol ENC_B_P = LATB.2
symbol ENC_B_M = LATB.3
symbol ENC_Z_P = LATB.3
symbol ENC_Z_M = LATB.4
symbol INPUT_VOLT = LATB.3
symbol LED_C = LATB.5
symbol LED_A = LATB.6
#ENDIF

#IFDEF PIC18F25k22 THEN
symbol ENC_A_P = LATB.0
symbol ENC_A_M = LATB.3
symbol ENC_B_P = LATB.1
symbol ENC_B_M = LATB.4
symbol ENC_Z_P = LATB.2
symbol ENC_Z_M = LATB.5
symbol INPUT_VOLT = PORTA.0
symbol LED_C = LATC.4
symbol LED_A = LATC.6
#ENDIF


dim POSITION_COUNTER as integer

dim C1 as byte
dim C2 as byte
dim  cmpt1 as byte
dim  cmpt2 as byte

dim ACTION as byte
const ENCODEUR_OFF = 0x00
const ENCODEUR_CLOCK_ROTATION = 0x02
const ENCODEUR_ANTICLOCK_ROTATION = 0x01

#IFDEF ADC_16BITS
dim VOLTAGE_TARGET as word
dim VOLTAGE as word
#ELSE
dim VOLTAGE_TARGET as byte
dim VOLTAGE as byte
#ENDIF

#IFDEF WITH_INERTIA
       #IFDEF ADC_16BITS
          dim VOLTAGE_TARGET_M1 as word
          dim VOLTAGE_TARGET_M2 as word
          dim VOLTAGE_TARGET_M3 as word
       #ELSE
          dim VOLTAGE_TARGET_M1 as byte
          dim VOLTAGE_TARGET_M2 as byte
          dim VOLTAGE_TARGET_M3 as byte
       #ENDIF
#ENDIF


'*******************************************************************************
'
'  CODE GENERE depuis https://jsbin.com/jasazaf/edit?js,output
'
'*******************************************************************************

'********************************************************
'--- Config---
' freq=48000000hz
' cpr=4000pulse/tr
' Kv=300rpm/V
' adcPrecision=9
'--- Info  ---
' 1 cycle = 83.33333333333334 ns
' 1V = 20000 pulse/s
' 1V = 600 cycle/pulse


'--- Code généré---
const ADC_PRECISION as word = 511
' ENCODER CPR = nbr de pulse par tour d'encoder
const ENCODER_CPR as word = 4000
' C1_MAPPING = nbr de cycle necessaire pour un quart de pulse
const C1_MAPPING as byte[512] = (3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,3,3,3,3,3,3,3,3,3,3,8,8,8,8,8,8,8,8,2,2,2,2,9,9,9,9,4,4,4,4,4,4,10,10,10,1,1,1,1,1,1,11,11,5,5,5,3,3,12,12,12,12,12,1,1,13,6,6,6,6,14,14,14,4,4,15,7,7,7,16,16,16,16,17,8,8,5,18,18,2,19,9,1,20,6,21,10,10,22,22,11,7,1,3,12,26,8,27,13,2,14,30,31,15,10,1,34,11,5,38,19,1,42,21,22,23,24,25,17,56,59,62,32,69,36,78,41,44,96,104,114,41,140,78,35,34,126,34,21,211,0,0,0,211,21,34,126,34,35,78,140,41,114,104,96,44,41,78,36,69,32,62,59,56,17,25,24,23,22,21,42,1,19,38,5,11,34,1,10,15,31,30,14,2,13,27,8,26,12,3,1,7,11,22,22,10,10,21,6,20,1,9,19,2,18,18,5,8,8,17,16,16,16,16,7,7,7,15,4,4,14,14,14,6,6,6,6,13,1,1,12,12,12,12,12,3,3,5,5,5,11,11,1,1,1,1,1,1,10,10,10,4,4,4,4,4,4,9,9,9,9,2,2,2,2,8,8,8,8,8,8,8,8,3,3,3,3,3,3,3,3,3,3,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
const C2_MAPPING as byte[512] = (1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,3,3,3,3,1,1,1,1,2,2,2,2,2,2,1,1,1,5,5,5,5,5,5,1,1,2,2,2,3,3,1,1,1,1,1,6,6,1,2,2,2,2,1,1,1,3,3,1,2,2,2,1,1,1,1,1,2,2,3,1,1,6,1,2,9,1,3,1,2,2,1,1,2,3,11,6,2,1,3,1,2,9,2,1,1,2,3,15,1,3,6,1,2,18,1,2,2,2,2,2,3,1,1,1,2,1,2,1,2,2,1,1,1,3,1,2,5,6,2,9,19,3,0,0,0,3,19,9,2,6,5,2,1,3,1,1,1,2,2,1,2,1,2,1,1,1,3,2,2,2,2,2,1,18,2,1,6,3,1,15,3,2,1,1,2,9,2,1,3,1,2,6,11,3,2,1,1,2,2,1,3,1,9,2,1,6,1,1,3,2,2,1,1,1,1,1,2,2,2,1,3,3,1,1,1,2,2,2,2,1,6,6,1,1,1,1,1,3,3,2,2,2,1,1,5,5,5,5,5,5,1,1,1,2,2,2,2,2,2,1,1,1,1,3,3,3,3,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2)
const ACTION_MAPPING as byte[512] = (1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2)
'*******************************************************************************
'
'  PROCEDURE INTERRUPTION
'
'*******************************************************************************


sub procedure interrupt

  if INTCON.TMR0IF = 1 then
    ' interruption sur timer0 overflow

    ' Clean interruption flag
    INTCON.TMR0IF = 0
    ' Desactive timer 0 interruption
    INTCON.TMR0IE=0
    ' START ADC conversion qui va declencer une interruption
    ADCON0.1=1
  end if

  if PIR1.ADIF = 1 then
    ' interruption sur ADC convertion

    ' Sauvegarde la valeur du voltage (sur 9bits uniquement)
    #IFDEF ADC_16BITS
        VOLTAGE_TARGET=ADRESH<<1 + ADRESL>>7
    #ELSE
        VOLTAGE_TARGET=ADRESH
    #ENDIF


    #IFDEF WITH_INERTIA
      'VOLTAGE = ((VOLTAGE_TARGET_M3>>1) + (VOLTAGE_TARGET_M2>>2)) + ((VOLTAGE_TARGET_M1>>3) + (VOLTAGE_TARGET>>3))
      ''Propagate delays
      'VOLTAGE_TARGET_M3=VOLTAGE_TARGET_M2
      'VOLTAGE_TARGET_M2=VOLTAGE_TARGET_M1
      'VOLTAGE_TARGET_M1=VOLTAGE_TARGET

      VOLTAGE = VOLTAGE>>1 + VOLTAGE_TARGET>>1
    #ELSE
      VOLTAGE = VOLTAGE_TARGET
    #ENDIF
    ' Sauvegarde la valeur des compteurs C1 et C2 pour les boucles ASM
    C1 = C1_MAPPING[VOLTAGE]
    C2 = C2_MAPPING[VOLTAGE]
    ' Sauvegarde l'action des encodeurs
    ACTION = ACTION_MAPPING[VOLTAGE]

    ' Clean interruption flag
    PIR1.ADIF = 0
    ' Prepare timer0 interruption
    TMR0L=0
    ' Enable timer 0 interruption to trigger ADC conversion later
    INTCON.TMR0IE=1
     
  end if
end sub

'*******************************************************************************
'
'  PROCEDURES
'
'*******************************************************************************


'*******************************************************************************
'
'  PROGRAMME PRINCIPAL
'
'*******************************************************************************
main:
   dim i as word
   
   TRISA = 0x00
   TRISA.B0 = 1                        ' A0 en input
   TRISA.B7 = 1                        ' A7 en input

   TRISB = 0x00                   ' B en sortie
   TRISC = 0x00                   ' C3 en input

   PORTA = 0x00                   ' initialize Port A
   PORTB = 0x00                   ' initialize Port B
   PORTC = 0x00                   ' initialize Port C
#IFDEF PIC18F25k22 THEN
   TRISE = 0x00
   TRISE.B3 = 1                                  ' E3 en entrée
   PORTE = 0x00                                     ' initialize port E
#ENDIF

#IFDEF PIC18F25k50 THEN
   ' -----------------------------------------------------------
   ' Use 16Mhz internal clock with PLL3x to get 48Mhz clock
   ' CONFIG1L : 0x0023
   ' CONFIG1H : 0x0008
   OSCCON = 0x00                 ' Oscillator control register
   OSCCON.IRCF2 = 1                   ' Internal RC Oscillator freq HFINTOSC 16Mhz
   OSCCON.IRCF1 = 1
   OSCCON.IRCF0 = 1
   OSCCON.SCS1 = 0                    ' System clock set to primary clock
   OSCCON.SCS0 = 0
   
   ' -----------------------------------------------------------
   ' Initialize A/D module
   ANSELA = 0x00
   ANSELA.B0=1                        ' A0 en entrée analogique
   ANSELB = 0x00                      ' aucune entrée analogique en B
   ANSELC = 0x00                      ' aucune entrée analogique en C
   
   ADCON0 = 0x00                      ' A/D Control register 0
   ADCON0.B6 = 0                      ' Analog channel set to AN3
   ADCON0.B5 = 0
   ADCON0.B4 = 0
   ADCON0.B3 = 1
   ADCON0.B2 = 1
   ADCON0.ADON = 1                    ' Enable ADC
   
   ADCON1 = 0x00                      ' A/D Control register 1
   ADCON1.PVCFG1 = 0                  ' Vref+ connected to AVdd
   ADCON1.PVCFG0 = 0
   ADCON1.NVCFG1 = 0                  ' Vref- connected to AVss
   ADCON1.NVCFG0 = 0

   ADCON2 = 0x00                      ' A/D Control register 2
   ADCON2.ADFM = 0                    ' Results format 0 = Left alignement
   ADCON2.ACQT2 = 1                   ' Acquisition time = 8 TAD
   ADCON2.ACQT1 = 0
   ADCON2.ACQT0 = 0
   ADCON2.ADCS2 = 0                   ' Conversion clock = Frc
   ADCON2.ADCS1 = 1
   ADCON2.ADCS0 = 1
   
   CM1CON0.7=0                        ' comparateurs arrétés
   CM2CON0.7=0                        ' comparateurs arrétés
#ENDIF

#IFDEF PIC18F25k22 THEN
   ' -----------------------------------------------------------
   ' Use 16Mhz internal clock with PLL4x to get 64Mhz clock
   ' CONFIG1H : 0x0038
   OSCCON = 0x00                 ' Oscillator control register
   OSCCON.IRCF2 = 1                   ' Internal RC Oscillator freq HFINTOSC 16Mhz
   OSCCON.IRCF1 = 1
   OSCCON.IRCF0 = 1
   OSCCON.SCS1 = 0                    ' System clock set to primary clock
   OSCCON.SCS0 = 0
   
   ' -----------------------------------------------------------
   ' Initialize A/D module
   ANSELA = 0x00
   ANSELA.B0=1                        ' A0 en entrée analogique
   ANSELB = 0x00                      ' aucune entrée analogique en B
   ANSELC = 0x00                      ' aucune entrée analogique en C
   
   ADCON0 = 0x00                      ' A/D Control register 0
   ADCON0.B6 = 0                      ' Analog channel set to AN0
   ADCON0.B5 = 0
   ADCON0.B4 = 0
   ADCON0.B3 = 0
   ADCON0.B2 = 0
   ADCON0.ADON = 1                    ' Enable ADC
   
   ADCON1 = 0x00                      ' A/D Control register 1
   ADCON1.PVCFG1 = 0                  ' Vref+ connected to AVdd
   ADCON1.PVCFG0 = 0
   ADCON1.NVCFG1 = 0                  ' Vref- connected to AVss
   ADCON1.NVCFG0 = 0
   
   ADCON2 = 0x00                      ' A/D Control register 2
   ADCON2.ADFM = 0                    ' Results format 0 = Left alignement
   ADCON2.ACQT2 = 1                   ' Acquisition time = 8 TAD
   ADCON2.ACQT1 = 0
   ADCON2.ACQT0 = 0
   ADCON2.ADCS2 = 0                   ' Conversion clock = Frc
   ADCON2.ADCS1 = 1
   ADCON2.ADCS0 = 1
   
   CM1CON0.7=0                                   ' comparateurs arrétés
   CM2CON0.7=0                                   ' comparateurs arrétés
#ENDIF


   ' Configure l'interruption sur Timer0
   INTCON.TMR0IE=0                      'Desactive l'interruption sur timer0 (elle est activee plus tard)
   T0CON.TMR0ON = 1 'Enable time0
   T0CON.T08BIT = 1 'Configure as 8bit counter
   T0CON.T0CS = 0                'T0CS: TMR0 Clock Source Select bit| 0 = Internal instruction cycle clock (FOSC/4)
   T0CON.PSA = 0
   T0CON.T0PS2 = 1                 'Prescaler Rate Select bits
   T0CON.T0PS1 = 1                 'Active un prescale 1/128 pour le timer0 afin d'augmenter la periode
   T0CON.T0PS0 = 0

   ' Configure l'interruption sur ADC
   INTCON.PEIE = 1                    ' Enable peripheral interrupt
   PIE1.ADIE = 1                       'Enable ADC Interrupt

   ' INIT variables
   POSITION_COUNTER=0
   LATB=%00101010
   VOLTAGE= ADC_PRECISION/2               ' START with a 0V VOLTAGE

   ' Fait clignoter la LED de status
   for i=1 to 5
     LED_A = 1                                     ' Led en vert
     LED_C = 0
     delay_ms(150)
     LED_A = 0                                     ' Led en rouge
     LED_C = 1
     delay_ms(150)
  next i
  LED_C = 0

   ' La valeur de tension de commande est récupérée de manière asynchrone
   ' par l'association du timer0 et de la mesure ADC en interruption.
   INTCON.GIE = 1 ' Enable global interrupt
   ADCON0.1=1 ' START a ADC conversion

   while TRUE
    select case ACTION
      case ENCODEUR_CLOCK_ROTATION
        ' Calcule la nouvelle position ( -ENCODER_CPR<POSITION_COUNTER<ENCODER_CPR)
        ' pour envoyer un signal de tour quand ENCODER_CPR=0
        Inc(POSITION_COUNTER)
        if POSITION_COUNTER = ENCODER_CPR then
           POSITION_COUNTER = 0
        end if

        ' SENS HORAIRE
        ' AP----____
        ' AM____----
        ' BP__----__
        ' BM--____--
        LATB=%00110001
        asm
        MOVF _C2,0
        MOVWF _cmpt2
        boucle2_0:
        MOVF _C1,0
        MOVWF _cmpt1
        boucle1_0:
        DECFSZ _cmpt1,f
        goto boucle1_0
        DECFSZ _cmpt2,f
        goto boucle2_0
        end asm

        if POSITION_COUNTER = 0 then
           LATB=%00 010101
        else
            LATB=%00100101
        end if
        asm
        MOVF _C2,0
        MOVWF _cmpt2
        boucle2_1:
        MOVF _C1,0
        MOVWF _cmpt1
        boucle1_1:
        DECFSZ _cmpt1,f
        goto boucle1_1
        DECFSZ _cmpt2,f
        goto boucle2_1
        end asm

        LATB=%00100110
        asm
        MOVF _C2,0
        MOVWF _cmpt2
        boucle2_2:
        MOVF _C1,0
        MOVWF _cmpt1
        boucle1_2:
        DECFSZ _cmpt1,f
        goto boucle1_2
        DECFSZ _cmpt2,f
        goto boucle2_2
        end asm

        LATB=%00101010
        asm
        MOVF _C2,0
        MOVWF _cmpt2
        boucle2_3:
        MOVF _C1,0
        MOVWF _cmpt1
        boucle1_3:
        DECFSZ _cmpt1,f
        goto boucle1_3
        DECFSZ _cmpt2,f
        goto boucle2_3
        end asm
      case ENCODEUR_ANTICLOCK_ROTATION
        ' Calcule la nouvelle position ( -ENCODER_CPR<POSITION_COUNTER<ENCODER_CPR)
        ' pour envoyer un signal de tour quand ENCODER_CPR=0
        Dec(POSITION_COUNTER)
        if POSITION_COUNTER = -ENCODER_CPR then
           POSITION_COUNTER = 0
        end if

        ' SENS ANTIHORAIRE
        ' AP__----__
        ' AM--____--
        ' BP----____
        ' BM____----
        LATB=%00100110
        asm
        MOVF _C2,0
        MOVWF _cmpt2
        boucle2_10:
        MOVF _C1,0
        MOVWF _cmpt1
        boucle1_10:
        DECFSZ _cmpt1,f
        goto boucle1_10
        DECFSZ _cmpt2,f
        goto boucle2_10
        end asm

        if POSITION_COUNTER = 0 then
           LATB=%00010101
        else
            LATB=%00100101
        end if
        asm
        MOVF _C2,0
        MOVWF _cmpt2
        boucle2_11:
        MOVF _C1,0
        MOVWF _cmpt1
        boucle1_11:
        DECFSZ _cmpt1,f
        goto boucle1_11
        DECFSZ _cmpt2,f
        goto boucle2_11
        end asm

        LATB=%00101001
        asm
        MOVF _C2,0
        MOVWF _cmpt2
        boucle2_12:
        MOVF _C1,0
        MOVWF _cmpt1
        boucle1_12:
        DECFSZ _cmpt1,f
        goto boucle1_12
        DECFSZ _cmpt2,f
        goto boucle2_12
        end asm

        LATB=%00101010
        asm
        MOVF _C2,0
        MOVWF _cmpt2
        boucle2_13:
        MOVF _C1,0
        MOVWF _cmpt1
        boucle1_13:
        DECFSZ _cmpt1,f
        goto boucle1_13
        DECFSZ _cmpt2,f
        goto boucle2_13
        end asm
      case ENCODEUR_OFF
         ' Etant dans une zone morte, on ne genere aucun pulse
         ' on attend juste qq cycle avant de recommencer la boucle
         Delay_Cyc(0x10)
    end select
   wend
end.